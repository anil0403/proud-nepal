generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  ram        Ram[]       @relation("StoreToRam")
  core       Core[]      @relation("StoreToCore")
  colors     Color[]     @relation("StoreToColor")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  quantity  Int?
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
}

model Product {
  id            String   @id @default(uuid())
  storeId       String
  categoryId    String
  name          String
  price         Float
  isFeatured    Boolean? @default(false)
  isArchived    Boolean? @default(false)
  sizeId        String
  stock         Int
  memorySlot    String
  storage       String
  StorageSlot   String
  keyboard      String
  camera        String
  display       String
  ethernet      String
  wlanBluetooth String
  fingerPrint   String
  powerAdapter  String
  battery       String
  colorId       String
  ramId         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  isOffice      Boolean? @default(false)
  isStudent     Boolean? @default(false)
  isGaming      Boolean? @default(false)
  cartId        Int?
  fbLink        String?
  instaLink     String?
  tiktokLink    String?
  discount      Float?
  freeItems     String?
  newPrice      Float?
  warranty      Float?
  coreId        String?
  warrantyNew   String?
  i3            Boolean?
  i5            Boolean?
  i7            Boolean?
  r3            Boolean?
  r5            Boolean?
  r7            Boolean?
  r9            Boolean?
  ram16gb       Boolean?
  ram2gb        Boolean?
  ram32gb       Boolean?
  ram4gb        Boolean?
  ram64gb       Boolean?
  ram6gb        Boolean?
  ram8gb        Boolean?
  store         Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category      Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size          Size     @relation(fields: [sizeId], references: [id])
  color         Color    @relation(fields: [colorId], references: [id])
  ram           Ram      @relation(fields: [ramId], references: [id])
  images        Image[]
  user          User?    @relation(fields: [userId], references: [id])
  cart          Cart?    @relation(fields: [cartId], references: [id])
  core          Core?    @relation(fields: [coreId], references: [id])

  @@index([userId])
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([ramId])
  @@index([cartId])
  @@index([coreId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Core {
  id        String    @id @default(uuid())
  storeId   String
  core      String
  thread    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToCore", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Ram {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToRam", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  address        String?
  billingAddress String?
  phone          String?
  image          String?
  hashedPassword String?
  username       String?
  createdAt      DateTime  @default(now()) @map("created_at")
  emailVerified  DateTime? @map("email_verified")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  isAdmin        Boolean?
  isUser         Boolean?
  products       Product[]
  cart           Cart?
  accounts       Account[]
  sessions       Session[]

  @@index([email])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
